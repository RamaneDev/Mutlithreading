using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace SMSEncryption
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        // The thread
        private Thread proThreadEncryption;
        // The string list with SMS messages to encrypt (input)
        private List<string> prlsSMSToEncrypt;
        // The string list with SMS messages encrypted (output)
        private List<string> prlsEncryptedSMS;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void butTest_Click(object sender, RoutedEventArgs e)
        {
            // The encrypted text
            string lsEncryptedText;
            // For each line in txtOriginalSMS TextBox
            int lineCount = txtOriginalSMS.LineCount;
            for (int line = 0; line < lineCount; line++)
            {
                lsEncryptedText = EncryptionProcedures.Encrypt(txtOriginalSMS.GetLineText(line));
                // Append a line with the Encrypted text
                txtEncryptedSMS.AppendText(lsEncryptedText + Environment.NewLine);
                // Append a line with the Encrypted text decrypted to test everything is as expected
                txtEncryptedSMS.AppendText(EncryptionProcedures.Decrypt(lsEncryptedText) + Environment.NewLine);
            }
        }

        private void butRunInThread_Click(object sender, RoutedEventArgs e)
        {
            // Prepare everything the thread needs from the UI
            // For each line in txtOriginalSMS TextBox
            prlsSMSToEncrypt = new List<string>(txtOriginalSMS.LineCount);
            
            // Add the lines in txtOriginalSMS TextBox
            int lineCount = txtOriginalSMS.LineCount;
            for (int line = 0; line < lineCount; line++)
            {
                prlsSMSToEncrypt.Add(txtOriginalSMS.GetLineText(line));
            }
            // Create the new Thread and use the ThreadEncryptProcedure method
            
            proThreadEncryption = new Thread(new ThreadStart(ThreadEncryptProcedure));
            // Start running the thread
            proThreadEncryption.Start();
            // Join the independent thread to this thread to wait until ThreadProc ends
            proThreadEncryption.Join();
            // When the thread finishes running this is the next line that is going to be executed
            // Copy the string List generated by the thread
            
            foreach (string lsEncryptedText in prlsEncryptedSMS)
            {
                // Append a line with the Encrypted text
                txtEncryptedSMS.AppendText(lsEncryptedText + Environment.NewLine);
            }
        }


        private void ThreadEncryptProcedure()
        {
            string lsEncryptedText;
            //Initialize the encrypted array to the size of the array to encrypt.
            
            prlsEncryptedSMS = new List<string>(prlsSMSToEncrypt.Count);
            // Line of text message to encrypt
            string lsText;
            // Iterate through each string in the prlsSMSToEncrypt  string
            
            for (int i = 0; i < prlsSMSToEncrypt.Count; i++)
            {
                lsText = prlsSMSToEncrypt[i];
                lsEncryptedText = EncryptionProcedures.Encrypt(lsText);

                // Add the encrypted string to the List of encrypted strings
                prlsEncryptedSMS.Add(lsEncryptedText);
            }

            // Wait for 1 minute
            // Thread.Sleep(20000); in this period the main thread is blocked to join() thread running ThreadEncryptProcedure
            // so the UI will be not ready to use 
        }
    }
}
